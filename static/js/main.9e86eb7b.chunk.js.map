{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["LengthCtrl","props","class","type","id","onClick","handleChangeLng","length","App","state","sessionLng","breakLng","timeLeft","session","running","bind","updateTimer","reset","handleStartStop","formatMinutes","sign","this","signNum","eval","val","stateName","setState","clearInterval","timer","setInterval","min","className","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e86eb7b.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nconst LengthCtrl = props => {\n  return (\n    <div class=\"length-ctrl\">\n      <h3>{props.type} length</h3>\n      <div class=\"ctrl\">\n        <button id=\"sub\" onClick={() => {props.handleChangeLng(\"-\", props.type);}}>-</button>\n        <div>{props.length}</div>\n        <button id=\"add\" onClick={() => {props.handleChangeLng(\"+\", props.type);}}>+</button> \n      </div>\n    </div>\n  );\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sessionLng: 25,\n      breakLng: 5,\n      timeLeft: 25*60,\n      session: true,\n      running: false,\n    };\n    this.handleChangeLng = this.handleChangeLng.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n    this.reset = this.reset.bind(this);\n    this.handleStartStop = this.handleStartStop.bind(this);\n    this.formatMinutes = this.formatMinutes.bind(this);\n  }\n\n  handleChangeLng(sign, type) {\n    if (!this.state.running) {\n      const signNum = eval(\"0\" + sign + \"1\");\n      const val = this.state[type + \"Lng\"] + signNum;\n      const stateName = type + \"Lng\";\n      if (signNum < 0) {\n        if (val < 1) {\n          return;\n        }\n      }\n      eval(\"this.setState({\" + stateName + \": \" + val + \"});\");  \n      if (type==\"session\" && this.state.session == true) {\n        this.setState({timeLeft: this.state.sessionLng*60});\n      }\n      if (type==\"break\" && this.state.session == false) {\n        this.setState({timeLeft: this.state.breakLng*60});\n      }\n      }\n  }\n\n  handleStartStop() {\n    if (this.state.running) {\n      clearInterval(this.timer);\n      this.setState({running: false});\n    } else {\n      this.timer = setInterval(this.updateTimer, 1000);\n      this.setState({running: true});\n    }\n  }\n\n  updateTimer() {\n    if (this.state.running) {\n      if (this.state.timeLeft > 0) {\n        this.setState({timeLeft: this.state.timeLeft - 1});\n      } else {\n        if (this.state.session == false) {\n          this.setState({session: true});\n          this.setState({timeLeft: this.state.sessionLng*60});\n        } else {\n          this.setState({session: false});\n          this.setState({timeLeft: this.state.breakLng*60});\n        }\n      }\n    }\n  }\n\n  reset() {\n    this.setState({running: false});\n    this.setState({sessionLng: 25});\n    this.setState({breakLng: 5});\n    this.setState({timeLeft: this.state.sessionLng*60});\n    this.setState({session: true});\n  }\n\n  formatMinutes(min) {\n    if (min > 9) {return min;}\n    else {\n      return \"0\" + min;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>pomodoro clock</h1>\n        <div id=\"countdown\">\n          <h2>{this.state.session ? \"session\" : \"break\"}</h2>\n          <div class=\"counting\">{Math.floor(this.state.timeLeft/60)}:{this.formatMinutes(this.state.timeLeft%60)}</div>\n          <button onClick={this.handleStartStop}>{this.state.running ? \"pause\" : \"run\"}</button>\n          <button onClick={this.reset}>reset</button>\n        </div>\n        <LengthCtrl type=\"session\" length={this.state.sessionLng} handleChangeLng={this.handleChangeLng}/>\n        <LengthCtrl type=\"break\" length={this.state.breakLng} handleChangeLng={this.handleChangeLng}/>\n      </div>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}